--[==[
    Piece object class for example block game
    Copyright (C) 2021 Lilla Oshisaure

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
]==]
Piece = {
	donut_pieces = 3,

	-- main piece IDs
	IDs = {"I", "L", "J", "T", "S", "Z", "O"},

	-- altered piece IDs
	parents = {
		-- regular
		I = "I",
		S = "S",
		Z = "Z",
		L = "L",
		J = "J",
		T = "T",
		O = "O",

		-- Pentomino
		F5l = "T",
		F5r = "T",
		I5  = "I",
		L5l = "I",
		L5r = "I",
		N5l = "Z",
		N5r = "S",
		P5l = "J",
		P5r = "L",
		T5  = "T",
		U5  = "L",
		V5  = "J",
		W5  = "Z",
		X5  = "T",
		Y5l = "I",
		Y5r = "I",
		Z5l = "L",
		Z5r = "J",

		-- 45
		i = "I",
		s = "S",
		z = "Z",
		l = "L",
		j = "J",
		t = "T",
		o = "O",

		O1 = "O",
		O2 = "O",
		O3 = "O",
		O4 = "O",
		O5 = "O",
		O6 = "O",


		-- kek
		-- h = "I",
		
		ue = "T",
		hara = "O",
	},

    definitions = {
		-- My positive directions are right and up. Sorry if that bugs any of you out there.
		I = {
			{{ 1, 0},{ 0, 0},{-1, 0},{ 2, 0}},
			{{ 1, 2},{ 1, 1},{ 1, 0},{ 1,-1}}
		},
		S = {
			{{-1, 0},{ 0, 0},{ 0, 1},{ 1, 1}},
			{{ 0, 1},{ 0, 0},{ 1, 0},{ 1,-1}}
		},
		Z = {
			{{-1, 1},{ 0, 1},{ 0, 0},{ 1, 0}},
			{{ 1, 1},{ 1, 0},{ 0, 0},{ 0,-1}}
		},
		T = {
			{{ 1, 0},{ 0, 0},{-1, 0},{ 0, 1}},
			{{ 0, 1},{ 0, 0},{ 0,-1},{ 1, 0}},
			{{ 1, 0},{ 0, 0},{-1, 0},{ 0,-1}},
			{{ 0, 1},{ 0, 0},{ 0,-1},{-1, 0}},
		},
		J = {
			{{ 1, 0},{ 0, 0},{-1, 0},{-1, 1}},
			{{ 0, 1},{ 0, 0},{ 0,-1},{ 1, 1}},
			{{ 1, 0},{ 0, 0},{-1, 0},{ 1,-1}},
			{{ 0, 1},{ 0, 0},{ 0,-1},{-1,-1}},
		},
		L = {
			{{ 1, 0},{ 0, 0},{-1, 0},{ 1, 1}},
			{{ 0, 1},{ 0, 0},{ 0,-1},{ 1,-1}},
			{{ 1, 0},{ 0, 0},{-1, 0},{-1,-1}},
			{{ 0, 1},{ 0, 0},{ 0,-1},{-1, 1}},
		},
		O = {
			{{ 0, 0},{ 1, 0},{ 1, 1},{ 0, 1}}
		},

		-- Pentomino

		I5 = {
			{{-2, 0},{-1, 0},{ 0, 0},{ 1, 0},{ 2, 0}},
			{{ 0,-2},{ 0,-1},{ 0, 0},{ 0, 1},{ 0, 2}},
		},
		F5l = {
			{{-1,-1},{ 0,-1},{ 0, 0},{ 1, 0},{ 0, 1}},
			{{-1, 1},{-1, 0},{ 0, 0},{ 0,-1},{ 1, 0}},
			{{ 1, 1},{ 0, 1},{ 0, 0},{-1, 0},{ 0,-1}},
			{{ 1,-1},{ 1, 0},{ 0, 0},{ 0, 1},{-1, 0}},
		},
		F5r = {
			{{ 1,-1},{ 0,-1},{ 0, 0},{-1, 0},{ 0, 1}},
			{{-1,-1},{-1, 0},{ 0, 0},{ 0, 1},{ 1, 0}},
			{{-1, 1},{ 0, 1},{ 0, 0},{ 1, 0},{ 0,-1}},
			{{ 1, 1},{ 1, 0},{ 0, 0},{ 0,-1},{-1, 0}},
		},
		L5l = {
			{{ 2, 0},{ 1, 0},{ 0, 0},{-1, 0},{-1, 1}},
			{{ 0,-1},{ 0, 0},{ 0, 1},{ 0, 2},{ 1, 2}},
			{{-1, 1},{ 0, 1},{ 1, 1},{ 2, 1},{ 2, 0}},
			{{ 1, 2},{ 1, 1},{ 1, 0},{ 1,-1},{ 0,-1}},
		},
		L5r = {
			{{ 2, 0},{ 1, 0},{ 0, 0},{-1, 0},{ 2, 1}},
			{{ 0,-1},{ 0, 0},{ 0, 1},{ 0, 2},{ 1,-1}},
			{{-1, 1},{ 0, 1},{ 1, 1},{ 2, 1},{-1, 0}},
			{{ 1, 2},{ 1, 1},{ 1, 0},{ 1,-1},{ 0, 2}},
		},
		N5l = {
			{{ 2, 0},{ 1, 0},{ 0, 0},{ 0, 1},{-1, 1}},
			{{ 0,-1},{ 0, 0},{ 0, 1},{ 1, 1},{ 1, 2}},
			{{-1, 1},{ 0, 1},{ 1, 1},{ 1, 0},{ 2, 0}},
			{{ 1, 2},{ 1, 1},{ 1, 0},{ 0, 0},{ 0,-1}},
		},
		N5r = {
			{{-1, 0},{ 0, 0},{ 1, 0},{ 1, 1},{ 2, 1}},
			{{ 0, 2},{ 0, 1},{ 0, 0},{ 1, 0},{ 1,-1}},
			{{ 2, 1},{ 1, 1},{ 0, 1},{ 0, 0},{-1, 0}},
			{{ 1,-1},{ 1, 0},{ 1, 1},{ 0, 1},{ 0, 2}},
		},
		P5l = {
			{{ 1, 0},{ 0, 0},{-1, 0},{ 0, 1},{-1, 1}},
			{{ 0, 1},{ 0, 0},{ 0,-1},{ 1, 0},{ 1, 1}},
			{{ 1, 0},{ 0, 0},{-1, 0},{ 0,-1},{ 1,-1}},
			{{ 0, 1},{ 0, 0},{ 0,-1},{-1, 0},{-1,-1}},
		},
		P5r = {
			{{ 1, 0},{ 0, 0},{-1, 0},{ 0, 1},{ 1, 1}},
			{{ 0, 1},{ 0, 0},{ 0,-1},{ 1, 0},{ 1,-1}},
			{{ 1, 0},{ 0, 0},{-1, 0},{ 0,-1},{-1,-1}},
			{{ 0, 1},{ 0, 0},{ 0,-1},{-1, 0},{-1, 1}},
		},
		T5 = {
			{{-1,-1},{ 0,-1},{ 1,-1},{ 0, 0},{ 0, 1}},
			{{-1, 1},{-1, 0},{-1,-1},{ 0, 0},{ 1, 0}},
			{{ 1, 1},{ 0, 1},{-1, 1},{ 0, 0},{ 0,-1}},
			{{ 1,-1},{ 1, 0},{ 1, 1},{ 0, 0},{-1, 0}},
		},
		U5 = {
			{{ 1, 0},{ 0, 0},{-1, 0},{ 1, 1},{-1, 1}},
			{{ 0, 1},{ 0, 0},{ 0,-1},{ 1,-1},{ 1, 1}},
			{{ 1, 0},{ 0, 0},{-1, 0},{-1,-1},{ 1,-1}},
			{{ 0, 1},{ 0, 0},{ 0,-1},{-1, 1},{-1,-1}},
		},
		V5 = {
			{{-1,-1},{ 0,-1},{ 1,-1},{ 1, 0},{ 1, 1}},
			{{-1, 1},{-1, 0},{-1,-1},{ 0,-1},{ 1,-1}},
			{{ 1, 1},{ 0, 1},{-1, 1},{-1, 0},{-1,-1}},
			{{ 1,-1},{ 1, 0},{ 1, 1},{ 0, 1},{-1, 1}},
		},
		W5 = {
			{{-1, 1},{-1, 0},{ 0, 0},{ 0,-1},{ 1,-1}},
			{{ 1, 1},{ 0, 1},{ 0, 0},{-1, 0},{-1,-1}},
			{{ 1,-1},{ 1, 0},{ 0, 0},{ 0, 1},{-1, 1}},
			{{-1,-1},{ 0,-1},{ 0, 0},{ 1, 0},{ 1, 1}},
		},
		X5 = {
			{{ 0, 0},{ 0,-1},{-1, 0},{ 0, 1},{ 1, 0}},
		},
		Y5l = {
			{{ 2, 0},{ 1, 0},{ 0, 0},{-1, 0},{ 0, 1}},
			{{ 0,-1},{ 0, 0},{ 0, 1},{ 0, 2},{ 1, 1}},
			{{-1, 1},{ 0, 1},{ 1, 1},{ 2, 1},{ 1, 0}},
			{{ 1, 2},{ 1, 1},{ 1, 0},{ 1,-1},{ 0, 0}},
		},
		Y5r = {
			{{ 2, 0},{ 1, 0},{ 0, 0},{-1, 0},{ 1, 1}},
			{{ 0,-1},{ 0, 0},{ 0, 1},{ 0, 2},{ 1, 0}},
			{{-1, 1},{ 0, 1},{ 1, 1},{ 2, 1},{ 0, 0}},
			{{ 1, 2},{ 1, 1},{ 1, 0},{ 1,-1},{ 0, 1}},
		},
		Z5l = {
			{{-1,-1},{ 0,-1},{ 0, 0},{ 0, 1},{ 1, 1}},
			{{-1, 1},{-1, 0},{ 0, 0},{ 1, 0},{ 1,-1}},
			{{ 1, 1},{ 0, 1},{ 0, 0},{ 0,-1},{-1,-1}},
			{{ 1,-1},{ 1, 0},{ 0, 0},{-1, 0},{-1, 1}},
		},
		Z5r = {
			{{ 1,-1},{ 0,-1},{ 0, 0},{ 0, 1},{-1, 1}},
			{{-1,-1},{-1, 0},{ 0, 0},{ 1, 0},{ 1, 1}},
			{{-1, 1},{ 0, 1},{ 0, 0},{ 0,-1},{ 1,-1}},
			{{ 1, 1},{ 1, 0},{ 0, 0},{-1, 0},{-1,-1}},
		},



		-- 45Â° rotations
		i = {
			{{-1, 0},{ 0, 0},{ 1, 0},{ 2, 0}},
			{{-1, 2},{ 0, 1},{ 1, 0},{ 2,-1}},
			{{ 1, 2},{ 1, 1},{ 1, 0},{ 1,-1}},
			{{-1,-1},{ 0, 0},{ 1, 1},{ 2, 2}},
		},
		t = {
			{{ 1, 0},{ 0, 0},{-1, 0},{ 0, 1}},
			{{ 1,-1},{ 0, 0},{-1, 1},{ 1, 1}},
			{{ 0,-1},{ 0, 0},{ 0, 1},{ 1, 0}},
			{{-1,-1},{ 0, 0},{ 1, 1},{ 1,-1}},
			{{-1, 0},{ 0, 0},{ 1, 0},{ 0,-1}},
			{{-1, 1},{ 0, 0},{ 1,-1},{-1,-1}},
			{{ 0, 1},{ 0, 0},{ 0,-1},{-1, 0}},
			{{ 1, 1},{ 0, 0},{-1,-1},{-1, 1}},
		},
		j = {
			{{ 1, 0},{ 0, 0},{-1, 0},{-1, 1}},
			{{ 1,-1},{ 0, 0},{-1, 1},{ 0, 1}},
			{{ 0,-1},{ 0, 0},{ 0, 1},{ 1, 1}},
			{{-1,-1},{ 0, 0},{ 1, 1},{ 1, 0}},
			{{-1, 0},{ 0, 0},{ 1, 0},{ 1,-1}},
			{{-1, 1},{ 0, 0},{ 1,-1},{ 0,-1}},
			{{ 0, 1},{ 0, 0},{ 0,-1},{-1,-1}},
			{{ 1, 1},{ 0, 0},{-1,-1},{-1, 0}},
		},
		l = {
			{{ 1, 0},{ 0, 0},{-1, 0},{ 1, 1}},
			{{ 1,-1},{ 0, 0},{-1, 1},{ 1, 0}},
			{{ 0,-1},{ 0, 0},{ 0, 1},{ 1,-1}},
			{{-1,-1},{ 0, 0},{ 1, 1},{ 0,-1}},
			{{-1, 0},{ 0, 0},{ 1, 0},{-1,-1}},
			{{-1, 1},{ 0, 0},{ 1,-1},{-1, 0}},
			{{ 0, 1},{ 0, 0},{ 0,-1},{-1, 1}},
			{{ 1, 1},{ 0, 0},{-1,-1},{ 0, 1}},
		},

		z = {
			{{-1, 1},{ 0, 1},{ 0, 0},{ 1, 0}},
			{{-1, 2},{ 0, 1},{ 0, 0},{ 1,-1}},
			{{ 0, 1},{ 0, 0},{-1, 0},{-1,-1}},
			{{-2,-1},{-1, 0},{ 0, 0},{ 1, 1}},
		},

		s = {
			{{ 1, 1},{ 0, 1},{ 0, 0},{-1, 0}},
			{{ 2,-1},{ 1, 0},{ 0, 0},{-1, 1}},
			{{ 0, 1},{ 0, 0},{ 1, 0},{ 1,-1}},
			{{ 1, 2},{ 0, 1},{ 0, 0},{-1,-1}},
		},

		o = {
			{{ 0, 0},{ 1, 0},{ 1, 1},{ 0, 1}},
			{{ 0, 0},{ 1, 1},{ 2, 0},{ 1,-1}},
		},

		-- extend square
		h = {
			{{0,0}},
			{{0,0},{1,0}},
			{{0,0},{1,0},{2,0}},
			{{0,0},{1,0},{2,0},{3,0}},
			{{0,0},{1,0},{2,0},{3,0},{4,0}},
			{{0,0},{1,0},{2,0},{3,0},{4,0},{5,0}},
			{{0,0},{1,0},{2,0},{3,0},{4,0},{5,0},{6,0}},
			{{0,0},{1,0},{2,0},{3,0},{4,0},{5,0},{6,0},{7,0}},
			{{0,0},{1,0},{2,0},{3,0},{4,0},{5,0},{6,0},{7,0},{8,0}},
			{{0,0},{1,0},{2,0},{3,0},{4,0},{5,0},{6,0},{7,0},{8,0},{9,0}},
			{{0,0},{1,0},{2,0},{3,0},{4,0},{5,0},{6,0},{7,0},{8,0},{9,0},{10,0}}, -- should fail no matter what
		},

		-- donut pieces
		O1 = {{{-1, 0},{ 0,-1},{ 1, 0},{ 0, 1}}},
		O2 = {{{-1, 0},{ 0,-1},{ 1, 0},{ 0, 1},{ 1, 1},{-1, 1},{ 1,-1},{-1,-1}}},
		O3 = {{{-1, 0},{ 0,-1},{ 1, 0},{ 0, 1},{ 1, 1},{-1, 1},{ 1,-1},{-1,-1},{-2, 0},{ 0,-2},{ 2, 0},{ 0, 2}}},
		O4 = {{{ 1, 1},{-1, 1},{ 1,-1},{-1,-1},{-2, 0},{ 0,-2},{ 2, 0},{ 0, 2}}},
		O5 = {{{-1,-1},{ 0,-1},{ 1,-1},{ 2,-1},{ 2, 0},{ 2, 1},{ 2, 2},{ 1, 2},{ 0, 2},{-1, 2},{-1, 1},{-1, 0}}},
		O6 = {{{-2, 0},{-2,-1},{-1,-1},{-1,-2},{ 0,-2},{ 1,-2},{ 1,-1},{ 2,-1},{ 2, 0},{ 2, 1},{ 1, 1},{ 1, 2},{ 0, 2},{-1, 2},{-1, 1},{-2, 1}}},
        
        -- misc
		test = {{
			{-4, 0},{-3, 0},{-2, 0},{-1, 0},{ 0, 0},{ 1, 0},{ 2, 0},{ 3, 0},{ 4, 0},{ 5, 0},
			{-4, 1},{-3, 1},{-2, 1},{-1, 1},{ 0, 1},{ 1, 1},{ 2, 1},{ 3, 1},{ 4, 1},{ 5, 1},
			{-4, 2},{-3, 2},{-2, 2},{-1, 2},{ 0, 2},{ 1, 2},{ 2, 2},{ 3, 2},{ 4, 2},{ 5, 2},
			{-4, 3},{-3, 3},{-2, 3},{-1, 3},{ 0, 3},{ 1, 3},{ 2, 3},{ 3, 3},{ 4, 3},{ 5, 3},
			{-4, 4},{-3, 4},{-2, 4},{-1, 4},{ 0, 4},{ 1, 4},{ 2, 4},{ 3, 4},{ 4, 4},{ 5, 4},
		}},
		
        w6 = {
			{{-1, 1},{-1, 0},{ 0, 0},{ 0,-1},{ 1,-1},{-1,-1},},
			{{ 1, 1},{ 0, 1},{ 0, 0},{-1, 0},{-1,-1},{-1, 1},},
			{{ 1,-1},{ 1, 0},{ 0, 0},{ 0, 1},{-1, 1},{ 1, 1},},
			{{-1,-1},{ 0,-1},{ 0, 0},{ 1, 0},{ 1, 1},{ 1,-1},},
		},
		
		ue = {
			{{ 0, 1},{ 0, 0},{ 1, 0},{ 0,-1},{-2,-2},{-1,-2},{ 0,-2},{ 1,-2},{ 2,-2}},
			{{ 1, 0},{ 0, 0},{ 0,-1},{-1, 0},{-2, 2},{-2, 1},{-2, 0},{-2,-1},{-2,-2}},
			{{ 0,-1},{ 0, 0},{-1, 0},{ 0, 1},{ 2, 2},{ 1, 2},{ 0, 2},{-1, 2},{-2, 2}},
			{{-1, 0},{ 0, 0},{ 0, 1},{ 1, 0},{ 2,-2},{ 2,-1},{ 2, 0},{ 2, 1},{ 2, 2}},
		},
		
		--[==[		
			[][][][][][][]
			[]      []
			[]  [][][][][]
			[]  []      []
			[]  [][]><[][]
			[]  []      []
			[]  [][][][][]
			[]      []
			[]  []  []  []
		]==]
		hara = {
			{{-4, 4},{-3, 4},{-2, 4},{-1, 4},{ 0, 4},{ 1, 4},{ 2, 4},{-4, 3},{ 0, 3},{-4, 2},{-2, 2},{-1, 2},{ 0, 2},{ 1, 2},{ 2, 2},{-4, 1},{-2, 1},{ 2, 1},{-4, 0},{-2, 0},{-1, 0},{ 0, 0},{ 1, 0},{ 2, 0},{-4,-1},{-2,-1},{ 2,-1},{-4,-2},{-2,-2},{-1,-2},{ 0,-2},{ 1,-2},{ 2,-2},{-4,-3},{ 0,-3},{-4,-4},{-2,-4},{ 0,-4},{ 2,-4}},
			{{ 4, 4},{ 4, 3},{ 4, 2},{ 4, 1},{ 4,-0},{ 4,-1},{ 4,-2},{ 3, 4},{ 3,-0},{ 2, 4},{ 2, 2},{ 2, 1},{ 2,-0},{ 2,-1},{ 2,-2},{ 1, 4},{ 1, 2},{ 1,-2},{ 0, 4},{ 0, 2},{ 0, 1},{ 0,-0},{ 0,-1},{ 0,-2},{-1, 4},{-1, 2},{-1,-2},{-2, 4},{-2, 2},{-2, 1},{-2,-0},{-2,-1},{-2,-2},{-3, 4},{-3,-0},{-4, 4},{-4, 2},{-4,-0},{-4,-2}},
			{{ 4,-4},{ 3,-4},{ 2,-4},{ 1,-4},{-0,-4},{-1,-4},{-2,-4},{ 4,-3},{-0,-3},{ 4,-2},{ 2,-2},{ 1,-2},{-0,-2},{-1,-2},{-2,-2},{ 4,-1},{ 2,-1},{-2,-1},{ 4,-0},{ 2,-0},{ 1,-0},{-0,-0},{-1,-0},{-2,-0},{ 4, 1},{ 2, 1},{-2, 1},{ 4, 2},{ 2, 2},{ 1, 2},{-0, 2},{-1, 2},{-2, 2},{ 4, 3},{-0, 3},{ 4, 4},{ 2, 4},{-0, 4},{-2, 4}},
			{{-4,-4},{-4,-3},{-4,-2},{-4,-1},{-4, 0},{-4, 1},{-4, 2},{-3,-4},{-3, 0},{-2,-4},{-2,-2},{-2,-1},{-2, 0},{-2, 1},{-2, 2},{-1,-4},{-1,-2},{-1, 2},{-0,-4},{-0,-2},{-0,-1},{-0, 0},{-0, 1},{-0, 2},{ 1,-4},{ 1,-2},{ 1, 2},{ 2,-4},{ 2,-2},{ 2,-1},{ 2, 0},{ 2, 1},{ 2, 2},{ 3,-4},{ 3, 0},{ 4,-4},{ 4,-2},{ 4, 0},{ 4, 2}},
		}
	},
    orientations = {
        I = 2,
        S = 2,
        Z = 2,
        T = 4,
        J = 4,
        L = 4,
        O = 1,

		-- Pentomino
		F5l = 4,
		F5r = 4,
		I5  = 2,
		L5l = 4,
		L5r = 4,
		N5l = 4,
		N5r = 4,
		P5l = 4,
		P5r = 4,
		T5  = 4,
		U5  = 4,
		V5  = 4,
		W5  = 4,
		X5  = 1,
		Y5l = 4,
		Y5r = 4,
		Z5l = 2,
		Z5r = 2,

		i = 4,
		s = 4,
		z = 4,
		t = 8,
		j = 8,
		l = 8,
		o = 2,

		O1 = 1,
		O2 = 1,
		O3 = 1,
		O4 = 1,
		O5 = 1,
		O6 = 1,

		h = 11,
        
        w6 = 4,
		test = 1,
		
		ue = 4,
		hara = 4, 
    },
    -- there are the rotation points from the end orientation,
    -- i.e. the rotation point I[1] in the ccw table represents
    -- the point relative to the definition of orientation 2 of
    -- the I piece assiming it rotated CCW 2->1 with no offset
    -- the logic to do the animation essentially does a
    -- counter-rotation around this point (adjusted for kicks)
    -- coordinates are also doubled for easier definition
    rotation_points = {
        ccw = {
            I = {{ 2, 0}, { 1, 1}},
            S = {{ 0, 0}, { 1, 1}},
            Z = {{ 0, 0}, { 1, 1}},
            J = {{ 0, 0}, { 0, 0}, { 0, 0}, { 0, 0}},
            L = {{ 0, 0}, { 0, 0}, { 0, 0}, { 0, 0}},
            T = {{ 0, 0}, { 0, 0}, { 0, 0}, { 0, 0}},
            O = {{ 1, 1}},
			ue= {{ 0, 0}, { 0, 0}, { 0, 0}, { 0, 0}},
			hara= {{ 0, 0}, { 0, 0}, { 0, 0}, { 0, 0}},
        },
        cw = {
            I = {{ 1, 1}, { 2, 0}},
            S = {{ 1, 1}, { 0, 0}},
            Z = {{ 1, 1}, { 0, 0}},
            J = {{ 0, 0}, { 0, 0}, { 0, 0}, { 0, 0}},
            L = {{ 0, 0}, { 0, 0}, { 0, 0}, { 0, 0}},
            T = {{ 0, 0}, { 0, 0}, { 0, 0}, { 0, 0}},
            O = {{ 1, 1}},
			ue= {{ 0, 0}, { 0, 0}, { 0, 0}, { 0, 0}},
			hara= {{ 0, 0}, { 0, 0}, { 0, 0}, { 0, 0}},
        },
    },
    
	colours = {
		I = HSVA(270, 0.7, 1),
		J = HSVA(180, 0.7, 1),
		L = HSVA(  0, 0.7, 1),
		T = HSVA(150, 0.7, 1),
		S = HSVA( 60, 0.7, 1),
		Z = HSVA(240, 0.7, 1),
		O = HSVA( 30, 0.7, 1),

		F5l = AvgArrays(HSVA(180, 0.7, 1), HSVA(150, 0.7, 1), HSVA( 60, 0.7, 1)),
		F5r = AvgArrays(HSVA(  0, 0.7, 1), HSVA(150, 0.7, 1), HSVA(240, 0.7, 1)),
		I5  = AvgArrays(HSVA(270, 0.7, 1), HSVA( 30, 0.7, 1)),
		L5l = AvgArrays(HSVA(270, 0.7, 1), HSVA(180, 0.7, 1)),
		L5r = AvgArrays(HSVA(270, 0.7, 1), HSVA(  0, 0.7, 1)),
		N5l = AvgArrays(HSVA(240, 0.7, 1), HSVA(180, 0.7, 1)),
		N5r = AvgArrays(HSVA( 60, 0.7, 1), HSVA(  0, 0.7, 1)),
		P5l = AvgArrays(HSVA(180, 0.7, 1), HSVA(150, 0.7, 1), HSVA( 30, 0.7, 1)),
		P5r = AvgArrays(HSVA(  0, 0.7, 1), HSVA(150, 0.7, 1), HSVA( 30, 0.7, 1)),
		T5  = AvgArrays(HSVA(  0, 0.7, 1), HSVA(180, 0.7, 1), HSVA(150, 0.7, 1)),
		U5  = AvgArrays(HSVA(180, 0.7, 1), HSVA(  0, 0.7, 1), HSVA(  0, 0.7, 1)),
		V5  = AvgArrays(HSVA(180, 0.7, 1), HSVA(  0, 0.7, 1), HSVA(180, 0.7, 1)),
		W5  = AvgArrays(HSVA(240, 0.7, 1), HSVA( 60, 0.7, 1), HSVA( 30, 0.7, 1)),
		X5  = AvgArrays(HSVA(150, 0.7, 1), HSVA( 30, 0.7, 1)),
		Y5l = AvgArrays(HSVA(270, 0.7, 1), HSVA(150, 0.7, 1), HSVA(180, 0.7, 1)),
		Y5r = AvgArrays(HSVA(270, 0.7, 1), HSVA(150, 0.7, 1), HSVA(  0, 0.7, 1)),
		Z5l = AvgArrays(HSVA(180, 0.7, 1), HSVA( 30, 0.7, 1)),
		Z5r = AvgArrays(HSVA(  0, 0.7, 1), HSVA( 30, 0.7, 1)),

		i = HSVA(270, 0.7, 0.5),
		j = HSVA(180, 0.7, 0.5),
		l = HSVA(  0, 0.7, 0.5),
		t = HSVA(150, 0.7, 0.5),
		s = HSVA( 60, 0.7, 0.5),
		z = HSVA(240, 0.7, 0.5),
		o = HSVA( 30, 0.7, 0.5),


		O1 = HSVA( 30, 0.7, 1),
		O2 = HSVA( 30, 0.7, 1),
		O3 = HSVA( 30, 0.7, 1),
		O4 = HSVA( 30, 0.7, 1),
		O5 = HSVA( 30, 0.7, 1),
		O6 = HSVA( 30, 0.7, 1),

		h = {205/255,155/255,255/255,1},
        
		w6 = AvgArrays(HSVA(240, 0.7, 1), HSVA( 60, 0.7, 1), HSVA( 30, 0.7, 1)),
		test = {1,1,1,1},
		
		ue = {0.7, 0.7, 0.7, 1},
		hara = {0.7, 0.5, 0.3, 1},
	},
    kicktables = {
		I = "I",
		J = "TLJ",
		L = "TLJ",
		T = "TLJ",
		S = "SZ",
		Z = "SZ",
		O = "O",

		F5l = "default",
		F5r = "default",
		I5  = "default",
		L5l = "default",
		L5r = "default",
		N5l = "default",
		N5r = "default",
		P5l = "default",
		P5r = "default",
		T5  = "default",
		U5  = "default",
		V5  = "default",
		W5  = "default",
		X5  = "default",
		Y5l = "default",
		Y5r = "default",
		Z5l = "default",
		Z5r = "default",

		i = "i45",
		j = "default",
		l = "default",
		t = "default",
		s = "default",
		z = "default",
		o = "SZ",


		O1 = "O",
		O2 = "O",
		O3 = "O",
		O4 = "O",
		O5 = "O",
		O6 = "O",

		h = "h",
        
		w6 = "default",
		test = "O",
		ue = "default",
		hara = "default",
    },
	kicks_ccw = {
        I = {
            -- flat -> standing
            {{-1, 0}, {-1,-1}, {-2, 0}, {-2,-1}, {-1, 1}, {-2, 1}, {-1,-2}, {-2,-2}, { 0, 0}, { 0,-1}, { 1, 0}, { 1,-1}, { 0, 1}, { 1, 1}, { 0,-2}, { 1,-2}},
            -- standing -> flat
            {{ 0, 0}, { 0,-1}, {-1, 0}, {-1,-1}, { 0, 1}, {-1, 1}, { 0, 2}, {-1, 2}, { 1, 0}, { 1,-1}, { 2, 0}, { 2,-1}, { 1, 1}, { 2, 1}, { 1, 2}, { 2, 2}},
        },
        
        TLJ = {
            -- U -> L (right)
            {{ 0, 0}, { 0,-1}, { 1, 0}, { 1,-1}, {-1, 0}, {-1,-1}, { 0, 1}, { 1, 1}, {-1, 1}, { 0,-2}, { 0, 2}},
            -- R -> U (right)                    
            {{ 0, 0}, { 0,-1}, { 1, 0}, { 1,-1}, {-1, 0}, {-1,-1}, { 0, 1}, { 1, 1}, {-1, 1}, { 0,-2}, { 0, 2}},
            -- D -> R (left)                     
            {{ 0, 0}, { 0,-1}, {-1, 0}, {-1,-1}, { 1, 0}, { 1,-1}, { 0, 1}, {-1, 1}, { 1, 1}, { 0,-2}, { 0, 2}},
            -- L -> D (left)                     
            {{ 0, 0}, { 0,-1}, {-1, 0}, {-1,-1}, { 1, 0}, { 1,-1}, { 0, 1}, {-1, 1}, { 1, 1}, { 0,-2}, { 0, 2}},
        },
        
        SZ = {
            -- H -> V (left with offset)
            {{-1, 0}, {-1,-1}, {-2, 0}, {-2,-1}, {-1, 1}, {-2, 1}, { 0, 0}, { 0,-1}, { 0, 1}, {-1,-2}, {-1, 2}},
            -- V -> H (left no offset)
            {{ 0, 0}, { 0,-1}, {-1, 0}, {-1,-1}, { 0, 1}, {-1, 1}, { 1, 0}, { 1,-1}, { 1, 1}, { 0,-2}, { 0, 2}},
        },
        
        O = {
            -- lol
            {{ 0, 0}, { 0, 1}, { 0, 2}}
        },
        
		default = {
			-- all
			{{ 0, 0}, { 0,-1}, {-1, 0}, {-1,-1}, { 1, 0}, { 1,-1}, { 0, 1}, {-1, 1}, { 1, 1}, { 0,-2}, { 0, 2}},
		},
        
        -- special cases
        i45 = {
            -- _ -> /
            {{ 0, 0}, {-1,-1}, {-1, 0}, {-2,-1}, { 1, 1}, { 0, 1}, {-2,-2}, {-3,-2}, { 1, 0}, { 0,-1}, { 2, 0}, { 1,-1}, { 2, 1}, { 3, 1}, {-1,-2}, { 0,-2}},
            -- \ -> _
            {{ 0, 0}, { 1,-1}, {-1, 0}, { 0,-1}, {-1, 1}, {-2, 1}, {-2, 2}, {-3, 2}, { 1, 0}, { 2,-1}, { 2, 0}, { 3,-1}, { 0, 1}, { 1, 1}, {-1, 2}, { 0, 2}},
            -- | -> \
            {{ 0, 0}, { 0,-1}, {-1, 1}, {-1, 0}, { 0, 1}, {-1, 2}, { 0, 2}, {-1, 3}, { 1,-1}, { 1,-2}, { 2,-2}, { 2,-3}, { 1, 0}, { 2,-1}, { 1, 1}, { 2, 0}},
            -- / -> |
            {{-1, 0}, {-1,-1}, {-2,-1}, {-2,-2}, {-1,-2}, {-2,-3}, {-1, 1}, {-2, 0}, { 0, 1}, { 0, 0}, { 1, 2}, { 1, 1}, { 0,-1}, { 1, 0}, { 0, 2}, { 1, 3}},
        },
		h = {{ 0, 0}, {-1, 0}},
        
        
        --[[
		flat_I      = {{-1, 0}, {-1,-1}, {-2, 0}, {-2,-1}, {-1, 1}, {-2, 1}, {-1,-2}, {-2,-2}, { 0, 0}, { 0,-1}, { 1, 0}, { 1,-1}, { 0, 1}, { 1, 1}, { 0,-2}, { 1,-2}},
		standing_I  = {{ 0, 0}, { 0,-1}, {-1, 0}, {-1,-1}, { 0, 1}, {-1, 1}, { 0, 2}, {-1, 2}, { 1, 0}, { 1,-1}, { 2, 0}, { 2,-1}, { 1, 1}, { 2, 1}, { 1, 2}, { 2, 2}},

		-- not_I       = {{ 0, 0}, { 0,-1}, {-1, 0}, { 1, 0}, {-1,-1}, { 1,-1}, { 0, 1}, {-1, 1}, { 1, 1}, { 0,-2}, { 0, 2}}
		default     = {{ 0, 0}, { 0,-1}, { 1, 0}, {-1, 0}, { 1,-1}, {-1,-1}, { 0, 1}, { 1, 1}, {-1, 1}, { 0,-2}, { 0, 2}},

		o45_diamond = {{-1, 0}, {-1,-1}, { 0, 0}, {-2, 0}, { 0,-1}, {-2,-1}, {-1, 1}, { 0, 1}, {-2, 1}, {-1,-2}, {-1, 2}},
		o45_square  = {{ 0, 0}, { 0,-1}, { 1, 0}, {-1, 0}, { 1,-1}, {-1,-1}, { 0, 1}, { 1, 1}, {-1, 1}, { 0,-2}, { 0, 2}},

		i45_1       = {{ 0, 0}, {-1,-1}, {-1, 0}, {-2,-1}, { 1, 1}, { 0, 1}, {-2,-2}, {-3,-2}, { 1, 0}, { 0,-1}, { 2, 0}, { 1,-1}, { 2, 1}, { 3, 1}, {-1,-2}, { 0,-2}},
		i45_2       = {{ 0, 0}, { 1,-1}, {-1, 0}, { 0,-1}, {-1, 1}, {-2, 1}, {-2, 2}, {-3, 2}, { 1, 0}, { 2,-1}, { 2, 0}, { 3,-1}, { 0, 1}, { 1, 1}, {-1, 2}, { 0, 2}},
		i45_3       = {{ 0, 0}, { 0,-1}, {-1, 1}, {-1, 0}, { 0, 1}, {-1, 2}, { 0, 2}, {-1, 3}, { 1,-1}, { 1,-2}, { 2,-2}, { 2,-3}, { 1, 0}, { 2,-1}, { 1, 1}, { 2, 0}},
		i45_4       = {{-1, 0}, {-1,-1}, {-2,-1}, {-2,-2}, {-1,-2}, {-2,-3}, {-1, 1}, {-2, 0}, { 0, 1}, { 0, 0}, { 1, 2}, { 1, 1}, { 0,-1}, { 1, 0}, { 0, 2}, { 1, 3}},
		h           = {{ 0, 0}, {-1, 0}},
        --]]
	},
	kicks_cw = {
        I = {
            -- flat -> standing
            {{ 0, 0}, { 0,-1}, { 1, 0}, { 1,-1}, { 0, 1}, { 1, 1}, { 0,-2}, { 1,-2}, {-1, 0}, {-1,-1}, {-2, 0}, {-2,-1}, {-1, 1}, {-2, 1}, {-1,-2}, {-2,-2}},
            -- standing -> flat
            {{ 1, 0}, { 1,-1}, { 2, 0}, { 2,-1}, { 1, 1}, { 2, 1}, { 1, 2}, { 2, 2}, { 0, 0}, { 0,-1}, {-1, 0}, {-1,-1}, { 0, 1}, {-1, 1}, { 0, 2}, {-1, 2}},
        },
        
        TLJ = {
            -- U -> R (left)
            {{ 0, 0}, { 0,-1}, {-1, 0}, {-1,-1}, { 1, 0}, { 1,-1}, { 0, 1}, {-1, 1}, { 1, 1}, { 0,-2}, { 0, 2}},
            -- R -> D (right)                                               
            {{ 0, 0}, { 0,-1}, { 1, 0}, { 1,-1}, {-1, 0}, {-1,-1}, { 0, 1}, { 1, 1}, {-1, 1}, { 0,-2}, { 0, 2}},
            -- D -> L (right)                                               
            {{ 0, 0}, { 0,-1}, { 1, 0}, { 1,-1}, {-1, 0}, {-1,-1}, { 0, 1}, { 1, 1}, {-1, 1}, { 0,-2}, { 0, 2}},
            -- L -> U (left)                                                
            {{ 0, 0}, { 0,-1}, {-1, 0}, {-1,-1}, { 1, 0}, { 1,-1}, { 0, 1}, {-1, 1}, { 1, 1}, { 0,-2}, { 0, 2}},
        },
        
        SZ = {
            -- H -> V (right no offset)
            {{ 0, 0}, { 0,-1}, { 1, 0}, { 1,-1}, { 0, 1}, { 1, 1}, {-1, 0}, {-1,-1}, {-1, 1}, { 0,-2}, { 0, 2}},
            -- V -> H (right with offset)
            {{ 1, 0}, { 1,-1}, { 2, 0}, { 2,-1}, { 1, 1}, { 2, 1}, { 0, 0}, { 0,-1}, { 0, 1}, { 1,-2}, { 1, 2}},
        },
        
        O = {
            -- lol
            {{ 0, 0}, { 0, 1}, { 0, 2}}
        },
        
		default = {
            -- all
            {{ 0, 0}, { 0,-1}, { 1, 0}, { 1,-1}, {-1, 0}, {-1,-1}, { 0, 1}, { 1, 1}, {-1, 1}, { 0,-2}, { 0, 2}}
        },
        
        -- special cases
        i45 = {
            -- _ -> \
            {{ 0, 0}, {-1,-1}, {-1, 0}, {-2,-1}, { 1, 1}, { 0, 1}, {-2,-2}, {-3,-2}, { 1, 0}, { 0,-1}, { 2, 0}, { 1,-1}, { 2, 1}, { 3, 1}, {-1,-2}, { 0,-2}},
            -- \ -> |
            {{ 0, 0}, { 1,-1}, {-1, 0}, { 0,-1}, {-1, 1}, {-2, 1}, {-2, 2}, {-3, 2}, { 1, 0}, { 2,-1}, { 2, 0}, { 3,-1}, { 0, 1}, { 1, 1}, {-1, 2}, { 0, 2}},
            -- | -> /
            {{ 0, 0}, { 0,-1}, {-1, 1}, {-1, 0}, { 0, 1}, {-1, 2}, { 0, 2}, {-1, 3}, { 1,-1}, { 1,-2}, { 2,-2}, { 2,-3}, { 1, 0}, { 2,-1}, { 1, 1}, { 2, 0}},
            -- / -> _
            {{-1, 0}, {-1,-1}, {-2,-1}, {-2,-2}, {-1,-2}, {-2,-3}, {-1, 1}, {-2, 0}, { 0, 1}, { 0, 0}, { 1, 2}, { 1, 1}, { 0,-1}, { 1, 0}, { 0, 2}, { 1, 3}},
        },
		h = {
            -- all
            {{ 0, 0}, {-1, 0}}
        },
        
        --[[
		flat_I      = {{ 0, 0}, { 0,-1}, { 1, 0}, { 1,-1}, { 0, 1}, { 1, 1}, { 0,-2}, { 1,-2}, {-1, 0}, {-1,-1}, {-2, 0}, {-2,-1}, {-1, 1}, {-2, 1}, {-1,-2}, {-2,-2}},
		standing_I  = {{ 1, 0}, { 1,-1}, { 2, 0}, { 2,-1}, { 1, 1}, { 2, 1}, { 1, 2}, { 2, 2}, { 0, 0}, { 0,-1}, {-1, 0}, {-1,-1}, { 0, 1}, {-1, 1}, { 0, 2}, {-1, 2}},

		-- not_I       = {{ 0, 0}, { 0,-1}, { 1, 0}, {-1, 0}, { 1,-1}, {-1,-1}, { 0, 1}, { 1, 1}, {-1, 1}, { 0,-2}, { 0, 2}}
		default     = {{ 0, 0}, { 0,-1}, {-1, 0}, { 1, 0}, {-1,-1}, { 1,-1}, { 0, 1}, {-1, 1}, { 1, 1}, { 0,-2}, { 0, 2}},

		o45_diamond = {{ 0, 0}, { 0,-1}, { 1, 0}, {-1, 0}, { 1,-1}, {-1,-1}, { 0, 1}, { 1, 1}, {-1, 1}, { 0,-2}, { 0, 2}},
		o45_square  = {{ 1, 0}, { 1,-1}, { 2, 0}, { 0, 0}, { 2,-1}, { 0,-1}, { 1, 1}, { 2, 1}, { 0, 1}, { 1,-2}, { 1, 2}},

		i45_1       = {{ 0, 0}, { 1,-1}, { 1, 0}, { 2,-1}, {-1, 1}, { 0, 1}, { 2,-2}, { 3,-2}, {-1, 0}, { 0,-1}, {-2, 0}, {-1,-1}, {-2, 1}, {-3, 1}, { 1,-2}, { 0,-2}},
		i45_2       = {{ 0, 0}, { 0,-1}, { 1,-1}, { 1,-2}, { 0,-2}, { 1,-3}, { 0, 1}, { 1, 0}, {-1, 1}, {-1, 0}, {-2, 2}, {-2, 1}, {-1,-1}, {-2, 0}, {-1, 2}, {-2, 3}},
		i45_3       = {{ 1, 0}, { 1,-1}, { 2, 1}, { 2, 0}, { 1, 1}, { 2, 2}, { 1, 2}, { 2, 3}, { 0,-1}, { 0,-2}, {-1,-2}, {-1,-3}, { 0, 0}, {-1,-1}, { 0, 1}, {-1, 0}},
		i45_4       = {{ 0, 0}, {-1,-1}, { 1, 0}, { 0,-1}, { 1, 1}, { 2, 1}, { 2, 2}, { 3, 2}, {-1, 0}, {-2,-1}, {-2, 0}, {-3,-1}, { 0, 1}, {-1, 1}, { 1, 2}, { 0, 2}},
		h           = {{ 0, 0}, {-1, 0}},
        --]]
	},

	pentomino_pool = {
		I = {"L5l", "L5r", "Y5l", "Y5r"},
	    J = {"F5l", "N5l", "P5l", "T5", "U5", "V5", "Y5l", "Z5l"},
	    L = {"F5r", "N5r", "P5r", "T5", "U5", "V5", "Y5r", "Z5r"},
	    T = {"F5l", "F5r", "P5l", "P5r", "T5", "X5", "Y5l", "Y5r"},
	    S = {"F5l", "N5r", "P5r", "W5"},
	    Z = {"F5r", "N5l", "P5l", "W5"},
		O = {"P5l", "P5r"},
	},

	rotateCW = function(piece, board)
		local x, y, id, rot = piece.x, piece.y, piece.id, piece.orientation
		local newrot = (rot) % piece.max_orientations + 1
        --[[
		local kickid
		if     id == "I" then kickid = rot % 2 == 1 and "flat_I" or "standing_I"
		elseif id == "o" then kickid = rot % 2 == 1 and "o45_diamond" or "o45_square"
		elseif id == "i" then kickid = "i45_"..rot
		elseif id == "h" then kickid = "h"
		else                  kickid = "default"
		end
        local kicktable = Piece["kicks_cw"][kickid]
        --]]
        local kickid = Piece.kicktables[id]
        local kicktable = Piece.kicks_cw[kickid]
        if #kicktable > 1 then kicktable = kicktable[rot] else kicktable = kicktable[1] end
		piece.orientation = newrot
        for n, kick in ipairs(kicktable) do
            piece.x = x + kick[1]
            piece.y = y + kick[2]
			if not board:check_collision_with(piece) then
                -- print(id, kickid, "CW", kick[1], kick[2], n)
				return kick
			end
        end

		piece.x = x
		piece.y = y
		piece.orientation = rot
        return nil
	end,

	rotateCCW = function(piece, board)
		local x, y, id, rot = piece.x, piece.y, piece.id, piece.orientation
		if id == "h" then return piece:rotateCW(board) end
		local newrot = (rot-2) % piece.max_orientations + 1
        --[[
		local kickid
		if     id == "I" then kickid = rot % 2 == 1 and "flat_I" or "standing_I"
		elseif id == "o" then kickid = rot % 2 == 1 and "o45_diamond" or "o45_square"
		elseif id == "i" then kickid = "i45_"..rot
		else                  kickid = "default"
		end
        local kicktable = Piece["kicks_ccw"][kickid]
        --]]
        local kickid = Piece.kicktables[id]
        local kicktable = Piece.kicks_ccw[kickid]
        if #kicktable > 1 then kicktable = kicktable[rot] else kicktable = kicktable[1] end
		piece.orientation = newrot
        for n, kick in ipairs(kicktable) do
            piece.x = x + kick[1]
            piece.y = y + kick[2]
			if not board:check_collision_with(piece) then
                -- print(id, kickid, "CCW", kick[1], kick[2], n)
				return kick
			end
        end

		piece.x = x
		piece.y = y
		piece.orientation = rot
        return nil
	end,
    
    get_rotate_point = function(piece, dir, offset)
        local pts = Piece.rotation_points[dir][piece.id]
        if not pts then return nil end
        local x, y = unpack(pts[piece.orientation])
        local i, j = unpack(offset)
        local u, v
        if dir == "cw" then
            u = -i + j
            v = -i - j
        else
            u = -i - j
            v =  i - j
        end
        return {0.5*(x+u), 0.5*(y+v)}
    end,

	new = function(id)
		if id then
			return {
				blocks = Deepcopy(Piece.definitions[id]),
				id = id,
				parent = Piece.parents[id],
				colour = Piece.colours[id],
				rotateCW = Piece.rotateCW,
				rotateCCW = Piece.rotateCCW,
                get_rotate_point = Piece.get_rotate_point,
				x = 5,
				y = 21,
				orientation = 1, -- 1 = neutral, 2 = CW, 3 = upside down, 4 = CCW
				max_orientations = Piece.orientations[id]
			}
		end
		-- no id: dummy piece to be filled later by code
		return {
			blocks = {{}},
			id = nil,
			parent = nil,
			colour = nil,
			rotateCW = Piece.rotateCW,
			rotateCCW = Piece.rotateCCW,
			x = 5,
			y = 21,
			orientation = 1, -- 1 = neutral, 2 = CW, 3 = upside down, 4 = CCW
			max_orientations = nil
		}
	end,
}


--[==[ kick table image
local width, height = 4000, 3000
local outcanvas = love.graphics.newCanvas(width,height)
love.graphics.setCanvas(outcanvas)
love.graphics.clear(1,1,1,1)
love.graphics.push()
do
    love.graphics.translate(width/2,0)
    love.graphics.scale(16, -16)
    local block_mesh = love.graphics.newMesh({
        {-1/2, -1/2, 0, 0, 1.0,1.0,1.0, 1},
        { 1/2, -1/2, 1, 0, 0.9,0.9,0.9, 1},
        { 1/2,  1/2, 1, 1, 0.7,0.7,0.7, 1},
        {-1/2,  1/2, 0, 1, 0.8,0.8,0.8, 1},
    }, "fan", "static")
    local y = 0
    local pieces = {"T", "L", "J", "S", "Z", "I"}
    for k, id in ipairs(pieces) do
        y = y + 7
        local def = Piece.definitions[id]
        local R, G, B, A = unpack(Piece.colours[id])
        local rotmax = Piece.orientations[id]
        for rot = 1, rotmax do
            y = y + 7
            local kickl = Piece.kicks_ccw[Piece.kicktables[id]][rot]
            local kickr = Piece.kicks_cw [Piece.kicktables[id]][rot]
            for _, bl in ipairs(def[rot]) do
                love.graphics.setColor(R, G, B, A)
                local i, j = unpack(bl)
                love.graphics.draw(block_mesh, i, j-y)
                love.graphics.setColor(0.5, 0.5, 0.5)
                for n = 1, #kickr do
                    love.graphics.draw(block_mesh, i+7*n, j-y)
                end
                for n = 1, #kickl do
                    love.graphics.draw(block_mesh, i-7*n, j-y)
                end
            end
            love.graphics.setColor(R*0.7, G*0.7, B*0.7, A)
            love.graphics.setLineWidth(1/8)
            for _, bl in ipairs(def[rot%rotmax + 1]) do
                local i, j = unpack(bl)
                for n, k in ipairs(kickr) do
                    local i2, j2 = i+k[1]+n*7, j+k[2]-y
					love.graphics.rectangle("line", i2-7/16, j2-7/16, 7/8, 7/8)
					love.graphics.line(i2-5/16, j2+5/16, i2+5/16, j2-5/16)
                end
            end
            for _, bl in ipairs(def[(rot-2)%rotmax + 1]) do
                local i, j = unpack(bl)
                for n, k in ipairs(kickl) do
                    local i2, j2 = i+k[1]-n*7, j+k[2]-y
					love.graphics.rectangle("line", i2-7/16, j2-7/16, 7/8, 7/8)
					love.graphics.line(i2-5/16, j2+5/16, i2+5/16, j2-5/16)
                end
            end
            
        end
    end
end
love.graphics.pop()
love.graphics.setCanvas()
outcanvas:newImageData():encode("png", "kicktable.png")
outcanvas:release()
-- ]==]